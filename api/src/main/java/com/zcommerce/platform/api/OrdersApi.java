/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.zcommerce.platform.api;

import java.math.BigDecimal;
import com.zcommerce.platform.api.model.CreateOrderRequestApi;
import org.springframework.format.annotation.DateTimeFormat;
import com.zcommerce.platform.api.model.MessageResponse;
import java.time.OffsetDateTime;
import com.zcommerce.platform.api.model.OrderResponseApi;
import com.zcommerce.platform.api.model.OrderStatistics;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-16T03:23:32.468932+05:30[Asia/Kolkata]")
@Validated
@Tag(name = "Orders", description = "the Orders API")
public interface OrdersApi {

    /**
     * DELETE /api/v1/orders/{orderId}
     *
     * @param orderId  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "cancelOrder",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/orders/{orderId}",
        produces = { "application/json" }
    )
    ResponseEntity<MessageResponse> cancelOrder(
        @Parameter(name = "orderId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("orderId") Long orderId
    );


    /**
     * POST /api/v1/orders
     *
     * @param createOrderRequestApi  (required)
     * @return Success (status code 201)
     */
    @Operation(
        operationId = "createOrder",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderResponseApi.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/orders",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<OrderResponseApi> createOrder(
        @Parameter(name = "CreateOrderRequestApi", description = "", required = true) @Valid @RequestBody CreateOrderRequestApi createOrderRequestApi
    );


    /**
     * GET /api/v1/orders
     *
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 20)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getAllOrders",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/orders",
        produces = { "application/json" }
    )
    ResponseEntity<Object> getAllOrders(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size
    );


    /**
     * GET /api/v1/orders/{orderId}
     *
     * @param orderId  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getOrderById",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderResponseApi.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/orders/{orderId}",
        produces = { "application/json" }
    )
    ResponseEntity<OrderResponseApi> getOrderById(
        @Parameter(name = "orderId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("orderId") Long orderId
    );


    /**
     * GET /api/v1/orders/statistics
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getOrderStatistics",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderStatistics.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/orders/statistics",
        produces = { "application/json" }
    )
    ResponseEntity<OrderStatistics> getOrderStatistics(
        
    );


    /**
     * GET /api/v1/orders/amount-range
     *
     * @param minAmount  (required)
     * @param maxAmount  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getOrdersByAmountRange",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OrderResponseApi.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/orders/amount-range",
        produces = { "application/json" }
    )
    ResponseEntity<List<OrderResponseApi>> getOrdersByAmountRange(
        @NotNull @Parameter(name = "minAmount", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "minAmount", required = true) BigDecimal minAmount,
        @NotNull @Parameter(name = "maxAmount", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxAmount", required = true) BigDecimal maxAmount
    );


    /**
     * GET /api/v1/orders/customer/{customerId}
     *
     * @param customerId  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getOrdersByCustomer",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OrderResponseApi.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/orders/customer/{customerId}",
        produces = { "application/json" }
    )
    ResponseEntity<List<OrderResponseApi>> getOrdersByCustomer(
        @Parameter(name = "customerId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("customerId") Long customerId
    );


    /**
     * GET /api/v1/orders/date-range
     *
     * @param startDate  (required)
     * @param endDate  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getOrdersByDateRange",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OrderResponseApi.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/orders/date-range",
        produces = { "application/json" }
    )
    ResponseEntity<List<OrderResponseApi>> getOrdersByDateRange(
        @NotNull @Parameter(name = "startDate", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startDate,
        @NotNull @Parameter(name = "endDate", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime endDate
    );


    /**
     * GET /api/v1/orders/status/{status}
     *
     * @param status  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getOrdersByStatus",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OrderResponseApi.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/orders/status/{status}",
        produces = { "application/json" }
    )
    ResponseEntity<List<OrderResponseApi>> getOrdersByStatus(
        @Parameter(name = "status", description = "", required = true, in = ParameterIn.PATH) @PathVariable("status") String status
    );


    /**
     * GET /api/v1/orders/needing-attention
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getOrdersNeedingAttention",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OrderResponseApi.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/orders/needing-attention",
        produces = { "application/json" }
    )
    ResponseEntity<List<OrderResponseApi>> getOrdersNeedingAttention(
        
    );


    /**
     * PATCH /api/v1/orders/{orderId}/status
     *
     * @param orderId  (required)
     * @param status  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "updateOrderStatus",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderResponseApi.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/v1/orders/{orderId}/status",
        produces = { "application/json" }
    )
    ResponseEntity<OrderResponseApi> updateOrderStatus(
        @Parameter(name = "orderId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("orderId") Long orderId,
        @NotNull @Parameter(name = "status", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = true) String status
    );

}
