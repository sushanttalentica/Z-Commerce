/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.zcommerce.platform.api;

import com.zcommerce.platform.api.model.MessageResponse;
import com.zcommerce.platform.api.model.PaymentRequest;
import com.zcommerce.platform.api.model.PaymentResponseApi;
import com.zcommerce.platform.api.model.PaymentStatistics;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-16T03:23:32.468932+05:30[Asia/Kolkata]")
@Validated
@Tag(name = "Payments", description = "the Payments API")
public interface PaymentsApi {

    /**
     * DELETE /api/v1/payments/{paymentId}
     *
     * @param paymentId  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "deletePayment",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/payments/{paymentId}",
        produces = { "application/json" }
    )
    ResponseEntity<MessageResponse> deletePayment(
        @Parameter(name = "paymentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("paymentId") String paymentId
    );


    /**
     * GET /api/v1/payments
     *
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 20)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getAllPayments",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/payments",
        produces = { "application/json" }
    )
    ResponseEntity<Object> getAllPayments(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size
    );


    /**
     * GET /api/v1/payments/{paymentId}
     *
     * @param paymentId  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getPaymentById",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentResponseApi.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/payments/{paymentId}",
        produces = { "application/json" }
    )
    ResponseEntity<PaymentResponseApi> getPaymentById(
        @Parameter(name = "paymentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("paymentId") String paymentId
    );


    /**
     * GET /api/v1/payments/order/{orderId}
     *
     * @param orderId  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getPaymentByOrderId",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentResponseApi.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/payments/order/{orderId}",
        produces = { "application/json" }
    )
    ResponseEntity<PaymentResponseApi> getPaymentByOrderId(
        @Parameter(name = "orderId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("orderId") Long orderId
    );


    /**
     * GET /api/v1/payments/statistics
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getPaymentStatistics",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentStatistics.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/payments/statistics",
        produces = { "application/json" }
    )
    ResponseEntity<PaymentStatistics> getPaymentStatistics(
        
    );


    /**
     * GET /api/v1/payments/customer/{customerId}
     *
     * @param customerId  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getPaymentsByCustomer",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PaymentResponseApi.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/payments/customer/{customerId}",
        produces = { "application/json" }
    )
    ResponseEntity<List<PaymentResponseApi>> getPaymentsByCustomer(
        @Parameter(name = "customerId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("customerId") Long customerId
    );


    /**
     * POST /api/v1/payments
     *
     * @param paymentRequest  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "processPayment",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentResponseApi.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/payments",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<PaymentResponseApi> processPayment(
        @Parameter(name = "PaymentRequest", description = "", required = true) @Valid @RequestBody PaymentRequest paymentRequest
    );


    /**
     * POST /api/v1/payments/{paymentId}/refund
     *
     * @param paymentId  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "refundPayment",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentResponseApi.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/payments/{paymentId}/refund",
        produces = { "application/json" }
    )
    ResponseEntity<PaymentResponseApi> refundPayment(
        @Parameter(name = "paymentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("paymentId") String paymentId
    );

}
