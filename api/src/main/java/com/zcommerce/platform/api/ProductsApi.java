/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.zcommerce.platform.api;

import java.math.BigDecimal;
import com.zcommerce.platform.api.model.CreateProductRequestApi;
import com.zcommerce.platform.api.model.MessageResponse;
import com.zcommerce.platform.api.model.ProductResponseApi;
import com.zcommerce.platform.api.model.UpdateProductRequestApi;
import com.zcommerce.platform.api.model.UpdateStockRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-16T03:23:32.468932+05:30[Asia/Kolkata]")
@Validated
@Tag(name = "Products", description = "the Products API")
public interface ProductsApi {

    /**
     * GET /api/v1/products/search/advanced
     *
     * @param name  (optional)
     * @param categoryId  (optional)
     * @param minPrice  (optional)
     * @param maxPrice  (optional)
     * @param isActive  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "advancedSearchProducts",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProductResponseApi.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/products/search/advanced",
        produces = { "application/json" }
    )
    ResponseEntity<List<ProductResponseApi>> advancedSearchProducts(
        @Parameter(name = "name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "categoryId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "categoryId", required = false) Long categoryId,
        @Parameter(name = "minPrice", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "minPrice", required = false) BigDecimal minPrice,
        @Parameter(name = "maxPrice", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxPrice", required = false) BigDecimal maxPrice,
        @Parameter(name = "isActive", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isActive", required = false) Boolean isActive
    );


    /**
     * POST /api/v1/products
     *
     * @param createProductRequestApi  (required)
     * @return Success (status code 201)
     */
    @Operation(
        operationId = "createProduct",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductResponseApi.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/products",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ProductResponseApi> createProduct(
        @Parameter(name = "CreateProductRequestApi", description = "", required = true) @Valid @RequestBody CreateProductRequestApi createProductRequestApi
    );


    /**
     * DELETE /api/v1/products/{productId}
     *
     * @param productId  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "deleteProduct",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/products/{productId}",
        produces = { "application/json" }
    )
    ResponseEntity<MessageResponse> deleteProduct(
        @Parameter(name = "productId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("productId") Long productId
    );


    /**
     * GET /api/v1/products
     *
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 20)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getAllProducts",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/products",
        produces = { "application/json" }
    )
    ResponseEntity<Object> getAllProducts(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size
    );


    /**
     * GET /api/v1/products/low-stock
     *
     * @param threshold  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getLowStockProducts",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProductResponseApi.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/products/low-stock",
        produces = { "application/json" }
    )
    ResponseEntity<List<ProductResponseApi>> getLowStockProducts(
        @NotNull @Parameter(name = "threshold", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "threshold", required = true) Integer threshold
    );


    /**
     * GET /api/v1/products/{productId}
     *
     * @param productId  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getProductById",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductResponseApi.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/products/{productId}",
        produces = { "application/json" }
    )
    ResponseEntity<ProductResponseApi> getProductById(
        @Parameter(name = "productId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("productId") Long productId
    );


    /**
     * GET /api/v1/products/sku/{sku}
     *
     * @param sku  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getProductBySku",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductResponseApi.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/products/sku/{sku}",
        produces = { "application/json" }
    )
    ResponseEntity<ProductResponseApi> getProductBySku(
        @Parameter(name = "sku", description = "", required = true, in = ParameterIn.PATH) @PathVariable("sku") String sku
    );


    /**
     * GET /api/v1/products/category/{categoryId}
     *
     * @param categoryId  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getProductsByCategory",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProductResponseApi.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/products/category/{categoryId}",
        produces = { "application/json" }
    )
    ResponseEntity<List<ProductResponseApi>> getProductsByCategory(
        @Parameter(name = "categoryId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("categoryId") Long categoryId
    );


    /**
     * GET /api/v1/products/price-range
     *
     * @param minPrice  (required)
     * @param maxPrice  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getProductsByPriceRange",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProductResponseApi.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/products/price-range",
        produces = { "application/json" }
    )
    ResponseEntity<List<ProductResponseApi>> getProductsByPriceRange(
        @NotNull @Parameter(name = "minPrice", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "minPrice", required = true) BigDecimal minPrice,
        @NotNull @Parameter(name = "maxPrice", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "maxPrice", required = true) BigDecimal maxPrice
    );


    /**
     * GET /api/v1/products/search
     *
     * @param keyword  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "searchProducts",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProductResponseApi.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/products/search",
        produces = { "application/json" }
    )
    ResponseEntity<List<ProductResponseApi>> searchProducts(
        @NotNull @Parameter(name = "keyword", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "keyword", required = true) String keyword
    );


    /**
     * PUT /api/v1/products/{productId}
     *
     * @param productId  (required)
     * @param updateProductRequestApi  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "updateProduct",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductResponseApi.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/products/{productId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ProductResponseApi> updateProduct(
        @Parameter(name = "productId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("productId") Long productId,
        @Parameter(name = "UpdateProductRequestApi", description = "", required = true) @Valid @RequestBody UpdateProductRequestApi updateProductRequestApi
    );


    /**
     * PATCH /api/v1/products/{productId}/stock
     *
     * @param productId  (required)
     * @param updateStockRequest  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "updateProductStock",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductResponseApi.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/v1/products/{productId}/stock",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ProductResponseApi> updateProductStock(
        @Parameter(name = "productId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("productId") Long productId,
        @Parameter(name = "UpdateStockRequest", description = "", required = true) @Valid @RequestBody UpdateStockRequest updateStockRequest
    );

}
