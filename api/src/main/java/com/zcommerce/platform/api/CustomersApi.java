/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.zcommerce.platform.api;

import com.zcommerce.platform.api.model.CustomerResponseApi;
import com.zcommerce.platform.api.model.CustomerStatistics;
import com.zcommerce.platform.api.model.MessageResponse;
import com.zcommerce.platform.api.model.RegisterRequest;
import com.zcommerce.platform.api.model.UpdateCustomerRequestApi;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-16T03:23:32.468932+05:30[Asia/Kolkata]")
@Validated
@Tag(name = "Customers", description = "the Customers API")
public interface CustomersApi {

    /**
     * PATCH /api/v1/customers/{id}/activate
     *
     * @param id  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "activateCustomer",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerResponseApi.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/v1/customers/{id}/activate",
        produces = { "application/json" }
    )
    ResponseEntity<CustomerResponseApi> activateCustomer(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * POST /api/v1/customers
     *
     * @param registerRequest  (required)
     * @return Success (status code 201)
     */
    @Operation(
        operationId = "createCustomer",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerResponseApi.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/customers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CustomerResponseApi> createCustomer(
        @Parameter(name = "RegisterRequest", description = "", required = true) @Valid @RequestBody RegisterRequest registerRequest
    );


    /**
     * PATCH /api/v1/customers/{id}/deactivate
     *
     * @param id  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "deactivateCustomer",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerResponseApi.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/v1/customers/{id}/deactivate",
        produces = { "application/json" }
    )
    ResponseEntity<CustomerResponseApi> deactivateCustomer(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * DELETE /api/v1/customers/{id}
     *
     * @param id  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "deleteCustomer",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/customers/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<MessageResponse> deleteCustomer(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /api/v1/customers/active
     *
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 20)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getActiveCustomers",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/customers/active",
        produces = { "application/json" }
    )
    ResponseEntity<Object> getActiveCustomers(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size
    );


    /**
     * GET /api/v1/customers
     *
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 20)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getAllCustomers",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/customers",
        produces = { "application/json" }
    )
    ResponseEntity<Object> getAllCustomers(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size
    );


    /**
     * GET /api/v1/customers/{id}
     *
     * @param id  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getCustomerById",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerResponseApi.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/customers/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<CustomerResponseApi> getCustomerById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /api/v1/customers/username/{username}
     *
     * @param username  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getCustomerByUsername",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerResponseApi.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/customers/username/{username}",
        produces = { "application/json" }
    )
    ResponseEntity<CustomerResponseApi> getCustomerByUsername(
        @Parameter(name = "username", description = "", required = true, in = ParameterIn.PATH) @PathVariable("username") String username
    );


    /**
     * GET /api/v1/customers/statistics
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getCustomerStatistics",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerStatistics.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/customers/statistics",
        produces = { "application/json" }
    )
    ResponseEntity<CustomerStatistics> getCustomerStatistics(
        
    );


    /**
     * GET /api/v1/customers/city/{city}
     *
     * @param city  (required)
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 20)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getCustomersByCity",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/customers/city/{city}",
        produces = { "application/json" }
    )
    ResponseEntity<Object> getCustomersByCity(
        @Parameter(name = "city", description = "", required = true, in = ParameterIn.PATH) @PathVariable("city") String city,
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size
    );


    /**
     * GET /api/v1/customers/role/{role}
     *
     * @param role  (required)
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 20)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getCustomersByRole",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/customers/role/{role}",
        produces = { "application/json" }
    )
    ResponseEntity<Object> getCustomersByRole(
        @Parameter(name = "role", description = "", required = true, in = ParameterIn.PATH) @PathVariable("role") String role,
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size
    );


    /**
     * GET /api/v1/customers/top
     *
     * @param limit  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getTopCustomers",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CustomerResponseApi.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/customers/top",
        produces = { "application/json" }
    )
    ResponseEntity<List<CustomerResponseApi>> getTopCustomers(
        @NotNull @Parameter(name = "limit", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = true) Integer limit
    );


    /**
     * GET /api/v1/customers/search
     *
     * @param keyword  (required)
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 20)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "searchCustomers",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/customers/search",
        produces = { "application/json" }
    )
    ResponseEntity<Object> searchCustomers(
        @NotNull @Parameter(name = "keyword", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "keyword", required = true) String keyword,
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size
    );


    /**
     * PUT /api/v1/customers/{id}
     *
     * @param id  (required)
     * @param updateCustomerRequestApi  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "updateCustomer",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerResponseApi.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/customers/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CustomerResponseApi> updateCustomer(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "UpdateCustomerRequestApi", description = "", required = true) @Valid @RequestBody UpdateCustomerRequestApi updateCustomerRequestApi
    );


    /**
     * PATCH /api/v1/customers/{id}/verify-email
     *
     * @param id  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "verifyCustomerEmail",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerResponseApi.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/v1/customers/{id}/verify-email",
        produces = { "application/json" }
    )
    ResponseEntity<CustomerResponseApi> verifyCustomerEmail(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );

}
